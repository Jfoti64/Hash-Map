!function(){"use strict";var t=class{constructor(t,e){this.key=t,this.value=e,this.next=null}};const e=new class{constructor(){this.buckets=Array(31).fill(null),this.size=0}hash(t){let e=0;for(let s=0;s<t.length;s+=1)e=(31*e+t.charCodeAt(s))%this.buckets.length;return e}resize(){const e=this.findNextPrime(2*this.buckets.length),s=Array(e).fill(null);this.buckets.forEach((r=>{let n=r;for(;n;){const r=this.rehash(n.key,e),h=new t(n.key,n.value);h.next=s[r],s[r]=h,n=n.next}})),this.buckets=s}static rehash(t,e){let s=0;for(let r=0;r<t.length;r+=1)s=(31*s+t.charCodeAt(r))%e;return s}findNextPrime(t){let e=t;for(;!this.isPrime(e);)e+=1;return e}static isPrime(t){for(let e=2;e<=Math.sqrt(t);e+=1)if(t%e==0)return!1;return!0}set(e,s){this.size/this.buckets.length>.75&&this.resize();const r=this.hash(e),n=new t(e,s);let h=this.buckets[r];if(h){let t=null;for(;h;){if(h.key===e)return void(h.value=s);t=h,h=h.next}t.next=n,this.size+=1}else this.buckets[r]=n,this.size+=1}get(t){const e=this.hash(t);let s=this.buckets[e];if(!s)return null;for(;s;){if(s.key===t)return s.value;s=s.next}return null}has(t){const e=this.hash(t);let s=this.buckets[e];if(!s)return!1;for(;s;){if(s.key===t)return!0;s=s.next}return!1}remove(t){const e=this.hash(t);let s=this.buckets[e];if(!s)return!1;let r=null;for(;s;){if(s.key===t)return r?r.next=s.next:this.buckets[e]=s.next,!0;r=s,s=s.next}return!1}length(){let t=0;return this.buckets.forEach((e=>{let s=e;for(;s;)t+=1,s=s.next})),t}clear(){this.buckets.fill(null)}keys(){const t=[];return this.buckets.forEach((e=>{let s=e;for(;s;)t.push(s.key),s=s.next})),t}values(){const t=[];return this.buckets.forEach((e=>{let s=e;for(;s;)t.push(s.value),s=s.next})),t}entries(){const t=[];return this.buckets.forEach((e=>{let s=e;for(;s;){const e=[s.key,s.value];t.push(e),s=s.next}})),t}};e.set("John","Wayne"),e.set("Brad","Pitt"),console.log(e),console.log(e.length()),console.log(e.entries()),console.log(e.has("Brad"))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,